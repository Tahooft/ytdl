
# Generated by CodiumAI
from downloadermanager import DownloaderManager


import pytest


class TestDownloaderManager:

    # can start downloads for multiple urls
    def test_start_downloads_multiple_urls(self):
        urls = ['url1', 'url2', 'url3']
        options = {}
        max_simultaneous_downloads = 2
        downloader_manager = DownloaderManager(
            urls, options, max_simultaneous_downloads)
        downloader_manager.start_downloads()
        assert len(downloader_manager.downloaders) == 3
        assert all(downloader.is_finished()
                   for downloader in downloader_manager.downloaders)

    # can print finished urls after downloads complete
    def test_print_finished_urls(self):
        urls = ['url1', 'url2', 'url3']
        options = {}
        max_simultaneous_downloads = 2
        downloader_manager = DownloaderManager(
            urls, options, max_simultaneous_downloads)
        downloader_manager.start_downloads()
        downloader_manager.print_finished_urls()
        assert downloader_manager.finished_urls == ['url1', 'url2', 'url3']

    # can handle max_simultaneous_downloads limit
    def test_max_simultaneous_downloads_limit(self):
        urls = ['url1', 'url2', 'url3']
        options = {}
        max_simultaneous_downloads = 2
        downloader_manager = DownloaderManager(
            urls, options, max_simultaneous_downloads)
        downloader_manager.start_downloads()
        assert len(downloader_manager.downloaders) == 3
        assert sum(downloader.is_finished()
                   for downloader in downloader_manager.downloaders) == 2

    # can handle urls with invalid characters
    def test_invalid_characters_urls(self):
        urls = ['url1', 'url2', 'url3']
        options = {}
        max_simultaneous_downloads = 2
        downloader_manager = DownloaderManager(
            urls, options, max_simultaneous_downloads)
        downloader_manager.start_downloads()
        assert len(downloader_manager.downloaders) == 3
        assert all(downloader.is_finished()
                   for downloader in downloader_manager.downloaders)

    # can handle urls that don't exist
    def test_nonexistent_urls(self):
        urls = ['url1', 'url2', 'url3']
        options = {}
        max_simultaneous_downloads = 2
        downloader_manager = DownloaderManager(
            urls, options, max_simultaneous_downloads)
        downloader_manager.start_downloads()
        assert len(downloader_manager.downloaders) == 3
        assert all(downloader.is_finished()
                   for downloader in downloader_manager.downloaders)

    # can handle urls that return non-video content
    def test_non_video_content_urls(self):
        urls = ['url1', 'url2', 'url3']
        options = {}
        max_simultaneous_downloads = 2
        downloader_manager = DownloaderManager(
            urls, options, max_simultaneous_downloads)
        downloader_manager.start_downloads()
        assert len(downloader_manager.downloaders) == 3
        assert all(downloader.is_finished()
                   for downloader in downloader_manager.downloaders)
